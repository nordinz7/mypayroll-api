type Employee {
  _id: ID
  name: String!
  birthDate: DateTime!
  nationality: String!
  religion: Religion
  race: Race
  martialStatus: MartialStatus
  qualification: String
  educationLevel: EducationLevel

  spouseName: String
  spouseOccupation: String
  children: Int

  enumeration: Enumeration

  phone: String
  email: String
  createdAt: String!
  updatedAt: String!
}

type Employees {
  rows: [Employee]
  pagination: numberPagination
}

enum MartialStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Religion {
  ISLAM
  CHRISTIAN
  BUDDHA
  HINDU
  OTHER
}

enum Race {
  MALAY
  CHINESE
  INDIAN
  OTHER
}

enum EducationLevel {
  PRIMARY
  SECONDARY
  POST_SECONDARY
  DIPLOMA
  DEGREE
  MASTER
  PHD
}

input CreateEmployeeInput {
  name: String!
  birthDate: DateTime!
  nationality: String!
}

input EmployeesQueryInput {
  q: String
  limit: Int
  offset: Int
}

type Query {
  employee(_id: ID!): Employee
  employees(input: EmployeesQueryInput): Employees
}

type Mutation {
  createEmployee(input: CreateEmployeeInput): Response
}
