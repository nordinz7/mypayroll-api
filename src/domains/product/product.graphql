type Product {
  id: Int
  name: String
  category: String
  price: Float
  description: String
  image: String
  quantity: Int
  sold: Int
  tags: [String]
  status: ProductStatus
  sellerUuid: UUID # User ID of the seller
  seller: User # User selling the product
}

type Products {
  rows: [Product]
  pageInfo: numberPagination
}

enum ProductStatus {
  ON_SALE # Available at a discounted price
  IN_STOCK # Product is available for purchase
  SOLD_OUT # Product is no longer available
  OUT_OF_STOCK # Temporarily unavailable but might be restocked
  DISCONTINUED # Permanently removed from inventory
}

input ProductInput {
  name: String
  category: String
  price: Float
  description: String
  image: String
  quantity: Int
  tags: [String]
}

input ProductsQueryInput {
  name: String
  status: ProductStatus
  categories: [String]
  tags: [String]
  sellerUuids: [UUID]
  limit: Int
  offset: Int
}

type Query {
  product(id: Int): Product
  products(input: ProductsQueryInput): Products
}

type Mutation {
  createProduct(input: ProductInput): Product
  updateProduct(id: Int, input: ProductInput): Product
  updateProductStatus(id: Int): Response
}
